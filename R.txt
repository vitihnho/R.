#Comandos R#

BIBLIOTECA - stringr
	str_c -> Juntam um ou mais vetores.
		Exemplo: nome <- "Victor"
			 otonome <- "Hugo"
			 NomeCompleto <- str_c(nome," ",otonome)

round() -> Mostra o valor arredondado.
ls() -> Mostra as variáveis existentes.
rm(variavel) -> Remove a variável citada.
rm(list = ls()) -> Remove TODAS as variáveis.

class(dado) -> Informa o tipo de dado.
#Para o número ser interpretado como inteiro, é necessário colocar "L" na frente -> "4L".
 
*************************************************************************************************************************

#Verificação de dados

is.integer(dado) -> Se o dado é inteiro
is.numeric(dado) -> Se o dado é flutuante
is.logical(dado) -> Se o dado é Vdd ou Falso
is.character(dado) -> Se o dado é um texto
is.double(dado) -> Se o dado é de dupla precisão 
(Retorna valor booleano)

*************************************************************************************************************************

#Conversão de dados

as.integer(dado) -> Converte o dado para inteiro
as.numeric(dado) -> Converte o dado para flutuante
as.logical(dado) -> Converte o dado para booleano
as.character(dado) -> Converte o dado para texto
as.double(dado) -> Converte o dado para dupla precisão

*************************************************************************************************************************

id <- c(1, 2, 3, 4, 5)

id # Retorna o vetor inteiro.
id[2] # Retorna a segunda posição do vetor.

#TODAS as variáveis são tratadas como vetor no R.

*************************************************************************************************************************

#Nomeando Vetores

dias <- c(1, 2, 3, 4, 5, 6, 7)
nomeSemana <- c("Segunda", "Terça", "Quarta", "Quinta", "Sexta", "Sábado", "Domingo")

names(dias) <- nomeSemana

#Dessa forma a informação pode ser buscada tanto pelo resultado, como pelo nome.

#Selecionando dados nos vetores.

numeros <- c(1:6)

numeros[c(TRUE,FALSE)]
#Dessa forma mostra o primeiro, pula o segundo e repete a ação até o final do vetor.

#OPERAÇÕES MATEMÁTICAS EM VETORES só funcionam se o número de elementes forem iguais ou múltiplos.

#ADICIONANDO E REMOVENDO ELEMENTOS EM VETORES

#adicionando por direcionamento direto | id <- c(1, 2, 3, 4, 5) | id[6] <- 6

#Usando o tamanho do vetor como parametro | id(length(id) + 1 <- 7

#Adicionando os valores em outro vetor | id <- c(id, 8)

#REMOVENDO ELEMENTOS

id[-3] #Oculta o dado do vetor.
id <- id[-3] #Com a atribuição, remove.

id[-c(1:3)] #Retorna o vetor sem o intervalo informado.

#COERÇÃO DE DADOS EM VETORES

#Vetor só pode ter um tipo de dado, então ele vai convertendo os dados utilizando o último adicionado como parâmetro. 

*************************************************************************************************************************

#MATRIZ - DIVIDIR O VETOR EM LINHAS E COLUNAS.

matrix(data, nrow=[qt, Linhas], ncol=[qt, Colunas], byrow = [F ou T], dimnames = nomes)

Exemplo: matrix(c(1:100)) -- # 1 coluna e 100 linhas
	 matrix(c(1:100), 5) -- # 20 colunas e 5 linhas
	 matrix(c(1:100), ncol = 5) -- # 5 colunas, 20 linhas

#Se o número de linhas e colunas não forem múltiplos, os dados se repetem até preencher o valor que falta.
#BYROW -> Quando é atribuído TRUE, os dados são distribuidos por linhas, já no caso de FALSE.. os dados são distribuidos por colunas.

#RBIND e CBIND

rbind(1:4, 2:5) -> Cria uma distribuição por linha
cbind(1:4, 2:5) -> Cria uma distribuição por coluna

#NOMEANDO MATRIZES

colnames -> Nomeia as colunas
rownames -> Nomeia as linhas

#SELECIONANDO ELEMENTOS NAS MATRIZES

#Seleção de valores -> matriz[1,1] -> Devolve o elemento na 1º linha e 1º coluna
#Seleção de linhas -> matriz[1,] -> Devolve a linha
#Seleção de colunas -> matriz[,1] -> Devolve a coluna

#ADICIONANDO E REMOVENDO LINHAS/COLUNAS NA MATRIZ

rbind(matriz, c(dados)) -> Adiciona nova linha.
cbind(matriz, c(dados)) -> Adiciona nova coluna.
matriz[c(-1,-2,-6),] -> Remove as linhas indicadas.

#SOMANDO VALORES NA MATRIZ | colSums/rowSums

sum(as.integer(matriz[])) -> É necessário que os dados sejam numéricos...
colSums -> Soma os dados da coluna
rolSums -> Soma os dados da linha

*************************************************************************************************************************

#FACTORS

#Separa os dados por níveis. Funciona como o distinct, mas atribui um valor em ordem alfabética ou numérica.


*************************************************************************************************************************

#DataFrames

#Analisando um data frame
df <- read.csv("bolsa.csv", sep = ";", check.names = F)
#Como está apresentado à cima, é possível definir o dataFrame separando por ponto e vírgula.

#Exclui variavel do DF
df$parcelas <- NULL

#Criando variável dentro do DF

df$New <- "a"
df$New <- c(2,3,4,NA,NA)
summary(df$New)
df$New <- NA

#Trabalhando com data frame
setwd("C:/abc")
df1 <- read.csv("exemplo.csv", sep = ";", stringsAsFactors = T)

df1[1]
#Mostrando a linha df[linha,coluna]
df1[1,]
#Monstrando todas as linhas, mas na 1 coluna
df1[,1]

#De uma coluna até outra
df[1:2]

#Excluindo uma coluna
df[-3]

#Primeiro linha das colunas de 1 até 2
df[1,1:2]

#Primeira linha menos de certa linha
df[1,-1]

#Mostrando número especifíco de linhas em certas colunas
df[1:2,1:3]

#Exeluindo linha e coluna
df[-1,-2]

#Modificando o df
df <- df[c(-1,-2)]

#Filtrando as variáveis.
df[1,1]
df$id[2]
df$id[1:3]
df[df$id == 1,]
df <- df[df$id == 1,]







